{"python.EnableREPLSmartSend.description":"切换 Python REPL 的智能发送。借助智能发送，可通过 Shift+Enter 向 REPL 发送最小的可运行代码块，并相应地移动光标。","python.activeStateToolPath.description":"ActiveState 运行时状态工具可执行文件的路径(版本 0.36+)。","python.autoComplete.extraPaths.description":"需要由自动完成引擎导入的库路径列表等。例如，使用 Google App SDK 时，路径不在系统路径中，因此需要添加到此列表中。","python.command.python.analysis.restartLanguageServer.title":"重启语言服务器","python.command.python.clearCacheAndReload.title":"清除缓存并重新加载窗口","python.command.python.clearWorkspaceInterpreter.title":"清除工作区解释器设置","python.command.python.configureTests.title":"配置测试","python.command.python.createEnvironment.title":"创建环境...","python.command.python.createNewFile.title":"新建 Python 文件","python.command.python.createTerminal.title":"创建终端","python.command.python.debugInTerminal.title":"调试 Python 文件","python.command.python.enableSourceMapSupport.title":"为扩展调试启用源映射支持","python.command.python.execInDedicatedTerminal.title":"在专用终端中运行 Python 文件","python.command.python.execInTerminal.title":"在终端中运行 Python 文件","python.command.python.execInTerminalIcon.title":"运行 Python 文件","python.command.python.execSelectionInDjangoShell.title":"在 Django Shell 中运行选择/行","python.command.python.execSelectionInTerminal.title":"在 Python 终端中运行选择/行","python.command.python.installJupyter.title":"安装 Jupyter 扩展","python.command.python.launchTensorBoard.title":"启动 Tensorboard","python.command.python.refreshTensorBoard.title":"刷新 TensorBoard","python.command.python.reportIssue.title":"报告问题…","python.command.python.setInterpreter.title":"选择解释器","python.command.python.startREPL.title":"启动 REPL","python.command.python.viewLanguageServerOutput.title":"显示语言服务器输出","python.command.python.viewOutput.title":"显示输出","python.command.testing.rerunFailedTests.title":"重新运行失败的测试","python.condaPath.description":"要用于激活的 conda 可执行文件的路径(版本 4.4+)。","python.createEnvironment.contentButton.description":"在编辑器中显示或隐藏 \"requirements.txt\" 或其他依赖项文件的“创建环境”按钮。","python.createEnvironment.trigger.description":"检测当前项目是否需要创建环境","python.defaultInterpreterPath.description":"第一次加载扩展时要使用的默认 Python 路径，在为工作区选择解释器后不再使用。请参阅 [点击这里](https://aka.ms/AAfekmf) 了解何时使用此内容","python.diagnostics.sourceMapsEnabled.description":"为错误日志中有意义的堆栈跟踪启用源映射支持。","python.editor.context.submenu.runPython":"运行 Python","python.editor.context.submenu.runPythonInteractive":"在交互窗口中运行","python.envFile.description":"包含环境变量定义的文件的绝对路径。","python.experiments.All.description":"所有试验的组合列表。","python.experiments.enabled.description":"在 Python 扩展中启用 A/B 测试试验。如果启用，则可能会包括在建议的增强功能和/或功能中。","python.experiments.optInto.description":"要选择加入的试验列表。如果为空，则为用户分配默认试验组。有关更多详细信息，请参阅 [点击这里](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) 了解详细信息。","python.experiments.optOutFrom.description":"要选择退出的试验列表。如果为空，则为用户分配默认试验组。有关更多详细信息，请参阅 [点击这里](https://github.com/microsoft/vscode-python/wiki/AB-Experiments)。","python.experiments.pythonDiscoveryUsingWorkers.description":"允许在发现解释器时使用工作线程执行大量计算。","python.experiments.pythonPromptNewToolsExt.description":"表示 Python 提示新工具扩展试验。","python.experiments.pythonREPLSmartSend.description":"表示 Python REPL Smart Send 试验。","python.experiments.pythonRecommendTensorboardExt.description":"表示 Tensorboard 扩展建议试验。","python.experiments.pythonSurveyNotification.description":"表示 Python 调查通知试验。","python.experiments.pythonTerminalEnvVarActivation.description":"允许使用环境变量来激活终端，而不是发送激活命令。","python.experiments.pythonTestAdapter.description":"表示 Python 测试适配器试验。","python.globalModuleInstallation.description":"不使用环境时是否全局安装 Python 模块。","python.interpreter.infoVisibility.always.description":"始终显示信息。","python.interpreter.infoVisibility.description":"控制何时在状态栏中显示所选解释器的信息。","python.interpreter.infoVisibility.never.description":"从不显示信息。","python.interpreter.infoVisibility.onPythonRelated.description":"仅在打开与 Python 相关的文件时显示信息。","python.languageServer.defaultDescription":"自动选择语言服务器: 如果已安装且可用，则为 Pylance，否则回退到 Jedi。","python.languageServer.description":"定义语言服务器的类型。","python.languageServer.jediDescription":"将语言服务器协议 (LSP) 背后的 Jedi 用作语言服务器。","python.languageServer.noneDescription":"禁用语言服务器功能。","python.languageServer.pylanceDescription":"将 Pylance 用作语言服务器。","python.logging.level.deprecation":"此设置已弃用。请使用命令 `Developer: Set Log Level...` 设置日志记录级别。","python.logging.level.description":"扩展日志的日志记录级别，默认为 \"error\"","python.menu.createNewFile.title":"Python 文件","python.missingPackage.severity.description":"设置 requirements.txt 或 pyproject.toml 中缺失包的严重性","python.pipenvPath.description":"要用于激活的 pipenv 可执行文件的路径。","python.poetryPath.description":"要执行的可执行文件的路径。","python.tensorBoard.logDirectory.deprecationMessage":"Tensorboard 支持已移至扩展 Tensorboard 扩展。请改用设置 `tensorBoard.logDirectory`。","python.tensorBoard.logDirectory.description":"将此设置设置为首选 TensorBoard 日志目录，以便在启动 TensorBoard 时跳过日志目录提示。","python.tensorBoard.logDirectory.markdownDeprecationMessage":"Tensorboard 支持已移至扩展 [Tensorboard 扩展](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.tensorboard)。请改用设置 `tensorBoard.logDirectory`。","python.terminal.activateEnvInCurrentTerminal.description":"加载扩展时，在当前终端中激活 Python 环境。","python.terminal.activateEnvironment.description":"在创建的所有终端中激活 Python 环境。","python.terminal.executeInFileDir.description":"在终端中执行文件时，是否在文件的目录中使用 execute，而不是当前打开的文件夹。","python.terminal.focusAfterLaunch.description":"启动 python 终端时，是否将光标聚焦在终端上。","python.terminal.launchArgs.description":"Python 启动在终端中执行文件时要使用的参数。","python.testing.autoTestDiscoverOnSaveEnabled.description":"保存测试文件时启用自动运行测试发现。","python.testing.cwd.description":"用于测试的可选工作目录。","python.testing.debugPort.description":"用于调试测试的端口号。","python.testing.promptToConfigure.description":"如果发现潜在的测试目录，则提示配置测试框架。","python.testing.pytestArgs.description":"传入的参数。每个参数都是数组中的一个单独项。","python.testing.pytestEnabled.description":"使用 pytest 启用测试。","python.testing.pytestPath.description":"pytest (pytest) 的路径，可以通过修改此设置以包含完整路径来使用自定义版本的 pytest。","python.testing.unittestArgs.description":"传入的参数。每个参数都是数组中的一个单独项。","python.testing.unittestEnabled.description":"使用 unittest 启用测试。","python.venvFolders.description":"要查找虚拟环境的主目录中的文件夹(默认支持 pyenv、direnv 和 virtualenvwrapper)。","python.venvPath.description":"包含虚拟环境列表的文件夹的路径(例如 ~/.pyenv、~/Envs、~/.virtualenvs)。","walkthrough.pythonDataScienceWelcome.description":"使用 Python 开始使用数据科学项目的第一步!","walkthrough.pythonDataScienceWelcome.title":"Python for Data Science 入门","walkthrough.pythonWelcome.description":"使用 Python 扩展提供的所有强大工具和功能来设置 Python 项目的第一步!","walkthrough.pythonWelcome.title":"Python 开发入门","walkthrough.step.python.createEnvironment.altText":"从命令面板创建 Python 环境","walkthrough.step.python.createEnvironment.description":"为 Python 项目创建环境。\r\n[创建环境](command:python.createEnvironment)\r\n**提示**: 在 [Command Palette](command:workbench.action.showCommands) 中运行 ``Python: Create Environment`` 命令。\r\n 🔍 请查看我们的 [docs](https://aka.ms/pythonenvs) 以了解详细信息。","walkthrough.step.python.createEnvironment.description2":"为 Python 项目创建环境，或使用 [选择 Python 解释器](command:python.setInterpreter)选择现有环境。\r\n[创建环境](command:python.createEnvironment)\r\n**提示**: 在 [Command Palette](command:workbench.action.showCommands) 中运行``Python: Create Environment``命令。","walkthrough.step.python.createEnvironment.title":"创建 Python 环境 ","walkthrough.step.python.createEnvironment.title2":"创建或选择 Python 环境","walkthrough.step.python.createNewNotebook.altText":"创建新的 Jupyter 笔记本","walkthrough.step.python.createNewNotebook.description":"在文件资源管理器中右键单击并创建扩展名为 .ipynb 的新文件。或者，打开 [命令面板](command:workbench.action.showCommands)并运行命令 \r\n``Jupyter: Create: New Blank Notebook``。\r\n[创建新 Jupyter Notebook](command:toSide:jupyter.createnewnotebook)\r\n 如果你有现有项目，还可以 [打开文件夹](command:workbench.action.files.openFolder)和/或从 GitHub 克隆项目: [克隆 Git 存储库](command:git.clone)。","walkthrough.step.python.createNewNotebook.title":"创建或打开 Jupyter Notebook","walkthrough.step.python.createPythonFile.altText":"使用 Python 项目打开 Python 文件或文件夹。","walkthrough.step.python.createPythonFile.description":"[打开](command:toSide:workbench.action.files.openFile) 或 [创建](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22python%22%7D) Python 文件 - 请确保将其保存为 \".py\"。\r\n[创建 Python 文件](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22python%22%7D)","walkthrough.step.python.createPythonFile.title":"创建 Python 文件","walkthrough.step.python.createPythonFolder.description":"[打开](command:workbench.action.files.openFolder) 或创建项目文件夹。\r\n[打开项目文件夹](command:workbench.action.files.openFolder)","walkthrough.step.python.createPythonFolder.title":"打开 Python 项目文件夹","walkthrough.step.python.dataScienceLearnMore.altText":"表示文档页和邮件列表资源的图像。","walkthrough.step.python.dataScienceLearnMore.description":"📒 查看 [Jupyter 扩展](command:workbench.extensions.search?\"ms-toolsai.jupyter\") 功能，方法是在 [Command Palette](command:workbench.action.showCommands) 中查找 \"Jupyter\"。 \r\n🏃🏻 在我们的 [教程](https://aka.ms/AAdjzpd) 中了解更多功能。  \r\n[了解详细信息](https://aka.ms/AAdar6q)","walkthrough.step.python.dataScienceLearnMore.title":"查找更多信息!","walkthrough.step.python.installJupyterExt.altText":"创建新的 Jupyter 笔记本","walkthrough.step.python.installJupyterExt.description":"如果尚未安装，请安装 [Jupyter 扩展](command:workbench.extensions.search?\"ms-toolsai.jupyter\") 在 VS Code 中充分利用笔记本体验!\r\n\r\n[搜索 Jupyter 扩展](command:workbench.extensions.search?\"ms-toolsai.jupyter\")","walkthrough.step.python.installJupyterExt.title":"安装 Jupyter 扩展","walkthrough.step.python.installPythonLinux.description":"Python 扩展要求安装 Python。通过终端安装 Python 3。\r\n[通过终端安装 Python](command:python.installPythonOnLinux)\r\n","walkthrough.step.python.installPythonLinux.title":"安装 Python","walkthrough.step.python.installPythonMac.description":"Python 扩展要求安装 Python。通过终端安装 Python 3。\r\n[通过 Brew 安装 Python](command:python.installPythonOnMac)\r\n","walkthrough.step.python.installPythonMac.title":"安装 Python","walkthrough.step.python.installPythonWin8.description":"Python 扩展要求安装 Python。安装 Python [从 python.org](https://www.python.org/downloads).\r\n\r\n[安装 Python](https://www.python.org/downloads)\r\n","walkthrough.step.python.installPythonWin8.title":"安装 Python","walkthrough.step.python.learnMoreWithDS.altText":"表示文档页和邮件列表资源的图像。","walkthrough.step.python.learnMoreWithDS.description":"🎨 通过在 [Command Palette](command:workbench.action.showCommands 中查找 \"Python\"，探索 Python 扩展必须提供的所有功能。 \r\n 📈 详细了解如何开始在 Python 中使用[数据科学](command:workbench.action.openWalkthrough?%7B%22category%22%3A%22ms-python.python%23pythonDataScienceWelcome%22%2C%22step%22%3A%22ms-python.python%23python.createNewNotebook%22%7D)。 \r\n ✨ 查看我们的[发行说明](https://aka.ms/AA8dxtb)，了解有关最新功能的详细信息。 \r\n \r\n[了解详细信息](https://aka.ms/AA8dqti)","walkthrough.step.python.learnMoreWithDS.description2":"🎨 通过在 [Command Palette](command:workbench.action.showCommands 中查找 \"Python\"，探索 Python 扩展必须提供的所有功能。 \r\n 📈 详细了解如何开始在 Python 中使用[数据科学](command:workbench.action.openWalkthrough?%7B%22category%22%3A%22ms-python.python%23pythonDataScienceWelcome%22%2C%22step%22%3A%22ms-python.python%23python.createNewNotebook%22%7D)。 \r\n ✨ 查看我们的[发行说明](https://aka.ms/AA8dxtb)，了解有关最新功能的详细信息。 \r\n \r\n[按照 Python 教程操作](https://aka.ms/AA8dqti)","walkthrough.step.python.learnMoreWithDS.title":"浏览更多资源","walkthrough.step.python.openInteractiveWindow.altText":"正在打开 Python 交互窗口","walkthrough.step.python.openInteractiveWindow.description":"Python 交互窗口是一个 Python shell，可以在其中执行和查看 Python 代码的结果。可以通过键入 ``#%%`` 在 Python 文件上创建单元格。\r\n \r\n若要随时打开交互窗口，请打开 [Command Palette](command:workbench.action.showCommands) 并运行命令 \r\n``Jupyter: Create Interactive Window``。\r\n[打开交互窗口](command:jupyter.createnewinteractive)","walkthrough.step.python.openInteractiveWindow.title":"打开 Python 交互窗口","walkthrough.step.python.runAndDebug.altText":"如何使用 F5 或右上角的播放按钮在 VS Code 中运行和调试。","walkthrough.step.python.runAndDebug.description":"打开 Python 文件并单击编辑器右上角的“播放”按钮，或在文件上按 F5 并选择“Python 文件”以使用调试程序运行。\r\n  \r\n[了解详细信息](https://code.visualstudio.com/docs/python/python-tutorial#_run-hello-world)","walkthrough.step.python.runAndDebug.title":"运行和调试 Python 文件","walkthrough.step.python.selectInterpreter.altText":"从状态栏中选择 Python 解释器","walkthrough.step.python.selectInterpreter.description":"选择要用于 Python 项目的 Python 解释器/环境。\r\n[选择 Python 解释器](command:python.setInterpreter)\r\n**提示**: 在 [Command Palette](command:workbench.action.showCommands) 中运行 ``Python: Select Interpreter`` 命令。","walkthrough.step.python.selectInterpreter.title":"选择 Python 解释器。"}
